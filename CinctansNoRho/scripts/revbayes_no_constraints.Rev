morpho <- readDiscreteCharacterData("data/Cinctans_for_RevBayes.nex")

num_taxa <- morpho.size()
num_branches <- 2 * num_taxa - 2
taxa <- morpho.names()

moves = VectorMoves()

br_len_lambda ~ dnExp(0.2)
moves.append(mvScale(br_len_lambda, weight=2))

rayfins = clade("Ludwigicinctus_truncatus", "Undatacinctus_undata" )
lobefins = clade("Trochocystites_bohemicus", "Trochocystoides_parvus")
outgroup = clade("Ctenocystis_utahensis")

constraints = v(rayfins, lobefins)

topology ~ dnUniformTopology(taxa, outgroup = outgroup, constraints = constraints, rooted=TRUE)




phylogeny ~ dnUniformTopologyBranchLength(taxa, branchLengthDistribution=dnExponential(br_len_lambda))

moves.append(mvNNI(phylogeny, weight=num_branches/2.0))
moves.append(mvSPR(phylogeny, weight=num_branches/10.0))
moves.append(mvBranchLengthScale(phylogeny, weight=num_branches))
tree_length := phylogeny.treeLength()

alpha_morpho ~ dnUniform( 0, 1E6 )
rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4)
moves.append(mvScale(alpha_morpho, lambda=1, weight=2.0))






n_max_states <- 5
idx = 1
morpho_bystate[1] <- morpho
for (i in 2:n_max_states) {
    morpho_bystate[i] <- morpho                                # make local tmp copy of data
    morpho_bystate[i].setNumStatesPartition(i)                 # only keep character blocks with state space equal to size i
    nc = morpho_bystate[i].nchar()                             # get number of characters per character size with i-sized states

    if (nc > 0) {                                              # for non-empty character blocks
        q[idx] <- fnJC(i)                                      # make i-by-i rate matrix
        m_morph[idx] ~ dnPhyloCTMC( tree=phylogeny,
                                    Q=q[idx],
                                    nSites=nc,
                                    siteRates=rates_morpho,
                                    type="Standard")           # create model of evolution for the character block

        m_morph[idx].clamp(morpho_bystate[i])                  # attach the data

        idx = idx + 1                                          # increment counter
        idx
    }
}

mymodel = model(phylogeny)

monitors = VectorMonitors()
monitors.append( mnModel(filename="output/mk_gamma.log", printgen=10))
monitors.append( mnFile(filename="output/mk_gamma.trees",printgen=10, phylogeny))
monitors.append( mnScreen(printgen=10))

#mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")
#mymcmc.run(generations=1000, tuningInterval=200)

mymcmcmc = mcmcmc(mymodel, monitors, moves, nchains=4)
mymcmcmc.run(generations=100000)
mymcmcmc.operatorSummary()

q()
